// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// SnapRule is an object representing the database table.
type SnapRule struct {
	ID           int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt    null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt    null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Frequency    int       `boil:"frequency" json:"frequency" toml:"frequency" yaml:"frequency"`
	VolumeID     string    `boil:"volume_id" json:"volume_id" toml:"volume_id" yaml:"volume_id"`
	VolumeName   string    `boil:"volume_name" json:"volume_name" toml:"volume_name" yaml:"volume_name"`
	VolumeRegion string    `boil:"volume_region" json:"volume_region" toml:"volume_region" yaml:"volume_region"`
	AccountID    int       `boil:"account_id" json:"account_id" toml:"account_id" yaml:"account_id"`

	R *snapRuleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L snapRuleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SnapRuleColumns = struct {
	ID           string
	CreatedAt    string
	UpdatedAt    string
	Frequency    string
	VolumeID     string
	VolumeName   string
	VolumeRegion string
	AccountID    string
}{
	ID:           "id",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	Frequency:    "frequency",
	VolumeID:     "volume_id",
	VolumeName:   "volume_name",
	VolumeRegion: "volume_region",
	AccountID:    "account_id",
}

// Generated where

var SnapRuleWhere = struct {
	ID           whereHelperint
	CreatedAt    whereHelpernull_Time
	UpdatedAt    whereHelpernull_Time
	Frequency    whereHelperint
	VolumeID     whereHelperstring
	VolumeName   whereHelperstring
	VolumeRegion whereHelperstring
	AccountID    whereHelperint
}{
	ID:           whereHelperint{field: `id`},
	CreatedAt:    whereHelpernull_Time{field: `created_at`},
	UpdatedAt:    whereHelpernull_Time{field: `updated_at`},
	Frequency:    whereHelperint{field: `frequency`},
	VolumeID:     whereHelperstring{field: `volume_id`},
	VolumeName:   whereHelperstring{field: `volume_name`},
	VolumeRegion: whereHelperstring{field: `volume_region`},
	AccountID:    whereHelperint{field: `account_id`},
}

// SnapRuleRels is where relationship names are stored.
var SnapRuleRels = struct {
	Account string
}{
	Account: "Account",
}

// snapRuleR is where relationships are stored.
type snapRuleR struct {
	Account *Account
}

// NewStruct creates a new relationship struct
func (*snapRuleR) NewStruct() *snapRuleR {
	return &snapRuleR{}
}

// snapRuleL is where Load methods for each relationship are stored.
type snapRuleL struct{}

var (
	snapRuleColumns               = []string{"id", "created_at", "updated_at", "frequency", "volume_id", "volume_name", "volume_region", "account_id"}
	snapRuleColumnsWithoutDefault = []string{"created_at", "updated_at", "frequency", "volume_id", "volume_name", "volume_region", "account_id"}
	snapRuleColumnsWithDefault    = []string{"id"}
	snapRulePrimaryKeyColumns     = []string{"id"}
)

type (
	// SnapRuleSlice is an alias for a slice of pointers to SnapRule.
	// This should generally be used opposed to []SnapRule.
	SnapRuleSlice []*SnapRule
	// SnapRuleHook is the signature for custom SnapRule hook methods
	SnapRuleHook func(boil.Executor, *SnapRule) error

	snapRuleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	snapRuleType                 = reflect.TypeOf(&SnapRule{})
	snapRuleMapping              = queries.MakeStructMapping(snapRuleType)
	snapRulePrimaryKeyMapping, _ = queries.BindMapping(snapRuleType, snapRuleMapping, snapRulePrimaryKeyColumns)
	snapRuleInsertCacheMut       sync.RWMutex
	snapRuleInsertCache          = make(map[string]insertCache)
	snapRuleUpdateCacheMut       sync.RWMutex
	snapRuleUpdateCache          = make(map[string]updateCache)
	snapRuleUpsertCacheMut       sync.RWMutex
	snapRuleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var snapRuleBeforeInsertHooks []SnapRuleHook
var snapRuleBeforeUpdateHooks []SnapRuleHook
var snapRuleBeforeDeleteHooks []SnapRuleHook
var snapRuleBeforeUpsertHooks []SnapRuleHook

var snapRuleAfterInsertHooks []SnapRuleHook
var snapRuleAfterSelectHooks []SnapRuleHook
var snapRuleAfterUpdateHooks []SnapRuleHook
var snapRuleAfterDeleteHooks []SnapRuleHook
var snapRuleAfterUpsertHooks []SnapRuleHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SnapRule) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range snapRuleBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SnapRule) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range snapRuleBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SnapRule) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range snapRuleBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SnapRule) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range snapRuleBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SnapRule) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range snapRuleAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SnapRule) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range snapRuleAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SnapRule) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range snapRuleAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SnapRule) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range snapRuleAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SnapRule) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range snapRuleAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSnapRuleHook registers your hook function for all future operations.
func AddSnapRuleHook(hookPoint boil.HookPoint, snapRuleHook SnapRuleHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		snapRuleBeforeInsertHooks = append(snapRuleBeforeInsertHooks, snapRuleHook)
	case boil.BeforeUpdateHook:
		snapRuleBeforeUpdateHooks = append(snapRuleBeforeUpdateHooks, snapRuleHook)
	case boil.BeforeDeleteHook:
		snapRuleBeforeDeleteHooks = append(snapRuleBeforeDeleteHooks, snapRuleHook)
	case boil.BeforeUpsertHook:
		snapRuleBeforeUpsertHooks = append(snapRuleBeforeUpsertHooks, snapRuleHook)
	case boil.AfterInsertHook:
		snapRuleAfterInsertHooks = append(snapRuleAfterInsertHooks, snapRuleHook)
	case boil.AfterSelectHook:
		snapRuleAfterSelectHooks = append(snapRuleAfterSelectHooks, snapRuleHook)
	case boil.AfterUpdateHook:
		snapRuleAfterUpdateHooks = append(snapRuleAfterUpdateHooks, snapRuleHook)
	case boil.AfterDeleteHook:
		snapRuleAfterDeleteHooks = append(snapRuleAfterDeleteHooks, snapRuleHook)
	case boil.AfterUpsertHook:
		snapRuleAfterUpsertHooks = append(snapRuleAfterUpsertHooks, snapRuleHook)
	}
}

// One returns a single snapRule record from the query.
func (q snapRuleQuery) One(exec boil.Executor) (*SnapRule, error) {
	o := &SnapRule{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for snap_rules")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SnapRule records from the query.
func (q snapRuleQuery) All(exec boil.Executor) (SnapRuleSlice, error) {
	var o []*SnapRule

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SnapRule slice")
	}

	if len(snapRuleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SnapRule records in the query.
func (q snapRuleQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count snap_rules rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q snapRuleQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if snap_rules exists")
	}

	return count > 0, nil
}

// Account pointed to by the foreign key.
func (o *SnapRule) Account(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "\"accounts\"")

	return query
}

// LoadAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (snapRuleL) LoadAccount(e boil.Executor, singular bool, maybeSnapRule interface{}, mods queries.Applicator) error {
	var slice []*SnapRule
	var object *SnapRule

	if singular {
		object = maybeSnapRule.(*SnapRule)
	} else {
		slice = *maybeSnapRule.(*[]*SnapRule)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &snapRuleR{}
		}
		args = append(args, object.AccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &snapRuleR{}
			}

			for _, a := range args {
				if a == obj.AccountID {
					continue Outer
				}
			}

			args = append(args, obj.AccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`accounts`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for accounts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for accounts")
	}

	if len(snapRuleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Account = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.SnapRules = append(foreign.R.SnapRules, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccountID == foreign.ID {
				local.R.Account = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.SnapRules = append(foreign.R.SnapRules, local)
				break
			}
		}
	}

	return nil
}

// SetAccount of the snapRule to the related item.
// Sets o.R.Account to related.
// Adds o to related.R.SnapRules.
func (o *SnapRule) SetAccount(exec boil.Executor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"snap_rules\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"account_id"}),
		strmangle.WhereClause("\"", "\"", 2, snapRulePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccountID = related.ID
	if o.R == nil {
		o.R = &snapRuleR{
			Account: related,
		}
	} else {
		o.R.Account = related
	}

	if related.R == nil {
		related.R = &accountR{
			SnapRules: SnapRuleSlice{o},
		}
	} else {
		related.R.SnapRules = append(related.R.SnapRules, o)
	}

	return nil
}

// SnapRules retrieves all the records using an executor.
func SnapRules(mods ...qm.QueryMod) snapRuleQuery {
	mods = append(mods, qm.From("\"snap_rules\""))
	return snapRuleQuery{NewQuery(mods...)}
}

// FindSnapRule retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSnapRule(exec boil.Executor, iD int, selectCols ...string) (*SnapRule, error) {
	snapRuleObj := &SnapRule{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"snap_rules\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, snapRuleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from snap_rules")
	}

	return snapRuleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SnapRule) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no snap_rules provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	if queries.MustTime(o.UpdatedAt).IsZero() {
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(snapRuleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	snapRuleInsertCacheMut.RLock()
	cache, cached := snapRuleInsertCache[key]
	snapRuleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			snapRuleColumns,
			snapRuleColumnsWithDefault,
			snapRuleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(snapRuleType, snapRuleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(snapRuleType, snapRuleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"snap_rules\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"snap_rules\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into snap_rules")
	}

	if !cached {
		snapRuleInsertCacheMut.Lock()
		snapRuleInsertCache[key] = cache
		snapRuleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the SnapRule.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SnapRule) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	queries.SetScanner(&o.UpdatedAt, currTime)

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	snapRuleUpdateCacheMut.RLock()
	cache, cached := snapRuleUpdateCache[key]
	snapRuleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			snapRuleColumns,
			snapRulePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update snap_rules, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"snap_rules\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, snapRulePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(snapRuleType, snapRuleMapping, append(wl, snapRulePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update snap_rules row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for snap_rules")
	}

	if !cached {
		snapRuleUpdateCacheMut.Lock()
		snapRuleUpdateCache[key] = cache
		snapRuleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q snapRuleQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for snap_rules")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for snap_rules")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SnapRuleSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), snapRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"snap_rules\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, snapRulePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in snapRule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all snapRule")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SnapRule) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no snap_rules provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	queries.SetScanner(&o.UpdatedAt, currTime)

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(snapRuleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	snapRuleUpsertCacheMut.RLock()
	cache, cached := snapRuleUpsertCache[key]
	snapRuleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			snapRuleColumns,
			snapRuleColumnsWithDefault,
			snapRuleColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			snapRuleColumns,
			snapRulePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert snap_rules, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(snapRulePrimaryKeyColumns))
			copy(conflict, snapRulePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"snap_rules\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(snapRuleType, snapRuleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(snapRuleType, snapRuleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert snap_rules")
	}

	if !cached {
		snapRuleUpsertCacheMut.Lock()
		snapRuleUpsertCache[key] = cache
		snapRuleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single SnapRule record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SnapRule) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SnapRule provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), snapRulePrimaryKeyMapping)
	sql := "DELETE FROM \"snap_rules\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from snap_rules")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for snap_rules")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q snapRuleQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no snapRuleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from snap_rules")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for snap_rules")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SnapRuleSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SnapRule slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(snapRuleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), snapRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"snap_rules\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, snapRulePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from snapRule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for snap_rules")
	}

	if len(snapRuleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SnapRule) Reload(exec boil.Executor) error {
	ret, err := FindSnapRule(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SnapRuleSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SnapRuleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), snapRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"snap_rules\".* FROM \"snap_rules\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, snapRulePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SnapRuleSlice")
	}

	*o = slice

	return nil
}

// SnapRuleExists checks if the SnapRule row exists.
func SnapRuleExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"snap_rules\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if snap_rules exists")
	}

	return exists, nil
}
